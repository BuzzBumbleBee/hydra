// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeviceGrantRequest Contains information on an ongoing device grant request.
//
// swagger:model deviceGrantRequest
type DeviceGrantRequest struct {

	// challenge
	Challenge string `json:"challenge,omitempty"`

	// client
	Client *OAuth2Client `json:"client,omitempty"`

	// handled at
	// Format: date-time
	HandledAt NullTime `json:"handled_at,omitempty"`

	// requested access token audience
	RequestedAccessTokenAudience StringSlicePipeDelimiter `json:"requested_access_token_audience,omitempty"`

	// requested scope
	RequestedScope StringSlicePipeDelimiter `json:"requested_scope,omitempty"`
}

// Validate validates this device grant request
func (m *DeviceGrantRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClient(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHandledAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedAccessTokenAudience(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestedScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceGrantRequest) validateClient(formats strfmt.Registry) error {
	if swag.IsZero(m.Client) { // not required
		return nil
	}

	if m.Client != nil {
		if err := m.Client.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceGrantRequest) validateHandledAt(formats strfmt.Registry) error {
	if swag.IsZero(m.HandledAt) { // not required
		return nil
	}

	if err := m.HandledAt.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("handled_at")
		}
		return err
	}

	return nil
}

func (m *DeviceGrantRequest) validateRequestedAccessTokenAudience(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedAccessTokenAudience) { // not required
		return nil
	}

	if err := m.RequestedAccessTokenAudience.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("requested_access_token_audience")
		}
		return err
	}

	return nil
}

func (m *DeviceGrantRequest) validateRequestedScope(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestedScope) { // not required
		return nil
	}

	if err := m.RequestedScope.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("requested_scope")
		}
		return err
	}

	return nil
}

// ContextValidate validate this device grant request based on the context it is used
func (m *DeviceGrantRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHandledAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequestedAccessTokenAudience(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequestedScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceGrantRequest) contextValidateClient(ctx context.Context, formats strfmt.Registry) error {

	if m.Client != nil {
		if err := m.Client.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("client")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceGrantRequest) contextValidateHandledAt(ctx context.Context, formats strfmt.Registry) error {

	if err := m.HandledAt.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("handled_at")
		}
		return err
	}

	return nil
}

func (m *DeviceGrantRequest) contextValidateRequestedAccessTokenAudience(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RequestedAccessTokenAudience.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("requested_access_token_audience")
		}
		return err
	}

	return nil
}

func (m *DeviceGrantRequest) contextValidateRequestedScope(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RequestedScope.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("requested_scope")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceGrantRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceGrantRequest) UnmarshalBinary(b []byte) error {
	var res DeviceGrantRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
